<?php

/**
 * @file
 * Module file for Contentimport.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\node\Entity\Node;
use Drupal\file\Entity\File;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\user\Entity\User;
use Drupal\contentimport\Utils;
use Drupal\contentimport\PreviousDevelopersCode;

/**
 * Implements hook_preprocess_page().
 */
function contentimport_preprocess_page(&$variables)
{
  $variables['page']['#cache']['contexts'][] = 'route';
  $urlRoute = \Drupal::routeMatch()->getRouteName();
  if (($urlRoute == 'contentimport.admin_settings')) {
    $variables['#attached']['library'][] = 'contentimport/common-styling';
  }
}


/**
 * Process field type
 * 
 * @param array $data Import record
 * @param array $keyIndex
 * @param array $fieldSettings Field settings for content type
 * @param string $fieldType Field type
 * @param string $fieldName Machine name of field
 * @param string $contentType Node content type
 * @return array Updated node data
 */
function process_field($data, $keyIndex, $fieldSettings, $fieldType, $fieldName, $contentType)
{
  switch ($fieldType) {
    case 'image':
      $logVariationFields .= "Importing Image (" . trim($data[$keyIndex[$fieldName]]) . ") :: ";
      if (!empty($data[$keyIndex[$fieldName]])) {
        $imgIndex = trim($data[$keyIndex[$fieldName]]);
        $files = glob('sites/default/files/' . $contentType . '/images/' . $imgIndex);
        $fileExists = file_exists('sites/default/files/' . $imgIndex);
        if (!$fileExists) {
          $images = [];
          foreach ($files as $file_name) {
            $image = File::create(['uri' => 'public://' . $contentType . '/images/' . basename($file_name)]);
            $image->save();
            $images[basename($file_name)] = $image;
            $imageId = $images[basename($file_name)]->id();
          }
          $nodeArrayEn[$fieldName] = [
            [
              'target_id' => $imageId,
              'alt' => $images['title'],
              'title' => $images['title'],
            ],
          ];
          $logVariationFields .= "Image uploaded successfully \n ";
        }
      }
      //$logVariationFields .= " Success \n";
      break;

    case 'entity_reference':
      $logVariationFields .= "Importing Reference Type (" . $fieldSettings['target_type'] . ") :: ";
      if ($fieldSettings['target_type'] == 'taxonomy_term') {
        $target_bundles = $fieldSettings['handler_settings']['target_bundles'];
        // If vocabulary field settings target is single, assume it.
        if (count($target_bundles) == 1 && !empty($data[$keyIndex[$fieldName]])) {
          $terms = PreviousDevelopersCode::get_term_reference($target_bundles[key($target_bundles)], $data[$keyIndex[$fieldName]]);
        }
        // If not, assume vocabulary is added with ":" delimiter.
        else {
          $reference = explode(":", $data[$keyIndex[$fieldName]]);
          if (is_array($reference) && $reference[0] != '') {
            $terms = PreviousDevelopersCode::get_term_reference($reference[0], $reference[1]);
          }
        }
        if (!empty($terms)) {
          $nodeArrayEn[$fieldName] = $terms;
        } else {
          // Log an error
        }
      } elseif ($fieldSettings['target_type'] == 'user') {
        $userArray = explode(', ', $data[$keyIndex[$fieldName]]);
        $users = PreviousDevelopersCode::get_user_info($userArray);
        $nodeArrayEn[$fieldName] = $users;
      } elseif ($fieldSettings['target_type'] == 'node') {
        $nodeArrayEns = explode(':', $data[$keyIndex[$fieldName]]);
        $nodeReference1 = PreviousDevelopersCode::get_node_id($nodeArrayEns);
        $nodeArrayEn[$fieldName] = $nodeReference1;
      }
      //$logVariationFields .= " Success \n";
      break;

    case 'text_long':
    case 'text':
      $logVariationFields .= "Importing Content (" . $fieldName . ") :: ";
      $nodeArrayEn[$fieldName] = [
        'value' => $data[$keyIndex[$fieldName]],
        'format' => 'full_html',
      ];
      $logVariationFields .= " Success \n";
      break;

    case 'entity_reference_revisions':
    case 'text_with_summary':
      $logVariationFields .= "Importing Content (" . $fieldName . ") :: ";
      $nodeArrayEn[$fieldName] = [
        'summary' => substr(strip_tags($data[$keyIndex[$fieldName]]), 0, 100),
        'value' => $data[$keyIndex[$fieldName]],
        'format' => 'full_html',
      ];
      //$logVariationFields .= " Success \n";

      break;

    case 'datetime':
      $logVariationFields .= "Importing Datetime (" . $fieldName . ") :: ";
      $dateArray = explode(':', $data[$keyIndex[$fieldName]]);
      if (count($dateArray) > 1) {
        $dateTimeStamp = strtotime($data[$keyIndex[$fieldName]]);
        $newDateString = date('Y-m-d\TH:i:s', $dateTimeStamp);
      } else {
        $dateTimeStamp = strtotime($data[$keyIndex[$fieldName]]);
        $newDateString = date('Y-m-d', $dateTimeStamp);
      }
      $nodeArrayEn[$fieldName] = ["value" => $newDateString];
      //$logVariationFields .= " Success \n";
      break;

    case 'timestamp':
      $logVariationFields .= "Importing Content (" . $fieldName . ") :: ";
      $nodeArrayEn[$fieldName] = ["value" => $data[$keyIndex[$fieldName]]];
      //$logVariationFields .= " Success \n";
      break;

    case 'boolean':
      //$logVariationFields .= "Importing Boolean (" . $fieldName . ") :: ";
      $affirmative = ['On', 'on', 'Yes', 'yes', 1, 'Oui', 'oui'];
      $nodeArrayEn[$fieldName] = in_array($data[$keyIndex[$fieldName]], $affirmative);
      //$logVariationFields .= " Success \n";
      break;

    case 'langcode':
      $logVariationFields .= "Importing Langcode (" . $fieldName . ") :: ";
      $nodeArrayEn[$fieldName] = ($data[$keyIndex[$fieldName]] != '') ? $data[$keyIndex[$fieldName]] : 'en';
      //$logVariationFields .= " Success \n";
      break;

    case 'geolocation':
      $logVariationFields .= "Importing Geolocation Field (" . $fieldName . ") :: ";
      $geoArray = explode(";", $data[$keyIndex[$fieldName]]);
      if (count($geoArray) > 0) {
        $geoMultiArray = [];
        for ($g = 0; $g < count($geoArray); $g++) {
          $latlng = explode(",", $geoArray[$g]);
          for ($l = 0; $l < count($latlng); $l++) {
            $latlng[$l] = floatval(preg_replace("/\[^0-9,.]/", "", $latlng[$l]));
          }
          array_push(
            $geoMultiArray,
            [
              'lat' => $latlng[0],
              'lng' => $latlng[1],
            ]
          );
        }
        $nodeArrayEn[$fieldName] = $geoMultiArray;
      } else {
        $latlng = explode(",", $data[$keyIndex[$fieldName]]);
        for ($l = 0; $l < count($latlng); $l++) {
          $latlng[$l] = floatval(preg_replace("/\[^0-9,.]/", "", $latlng[$l]));
        }
        $nodeArrayEn[$fieldName] = ['lat' => $latlng[0], 'lng' => $latlng[1]];
      }
      //$logVariationFields .= " Success \n";
      break;

    case 'entity_reference_revisions':
      /* In Progress */
      break;

    case 'list_string':
      $logVariationFields .= "Importing Content (" . $fieldName . ") :: ";
      $listArray = explode(",", $data[$keyIndex[$fieldName]]);
      array_walk($listArray, 'trim');
      $nodeArrayEn[$fieldName] = $listArray;
      //$logVariationFields .= " Success \n";
      break;

    case 'geofield':
      $logVariationFields .= "Importing Geofield Field (" . $fieldName . ") :: ";
      if (!empty(trim($data[$keyIndex[$fieldName]]))) {
        $geoFieldArray = explode(";", trim($data[$keyIndex[$fieldName]]));
        if (count($geoFieldArray) > 0) {
          $geoFieldMultiArray = [];
          for ($g = 0; $g < count($geoFieldArray); $g++) {
            $latlng = explode(",", $geoFieldArray[$g]);
            for ($l = 0; $l < count($latlng); $l++) {
              $latlng[$l] = floatval($latlng[$l]);
            }
            array_push(
              $geoFieldMultiArray,
              \Drupal::service('geofield.wkt_generator')->WktBuildPoint([trim($latlng[1]), trim($latlng[0])])
            );
          }
          $nodeArrayEn[$fieldName] = $geoFieldMultiArray;
        } else {
          $latlng = explode(",", trim($data[$keyIndex[$fieldName]]));
          for ($l = 0; $l < count($latlng); $l++) {
            $latlng[$l] = floatval($latlng[$l]);
          }
          $lonlat = \Drupal::service('geofield.wkt_generator')->WktBuildPoint([trim($latlng[1]), trim($latlng[0])]);
          $nodeArrayEn[$fieldName] = $lonlat;
        }
        //$logVariationFields .= " Success \n";
      }
      break;

    case 'authored_by':
      $logVariationFields .= "Importing Content (" . $fieldName . ") :: ";
      $user_id = get_user_id($data[$keyIndex[$fieldName]]);
      $nodeArrayEn['uid'] = ($user_id > 0) ? $user_id : \Drupal::currentUser()->id();
      //$logVariationFields .= " Success \n";
      break;

    default:
      $nodeArrayEn[$fieldName] = $data[$keyIndex[$fieldName]];
      break;
  }
}


/**
 * Implements hook_cron().
 */
function contentimport_cron()
{
  PreviousDevelopersCode::create_node('public://import.csv', 'complaint_link');
  PreviousDevelopersCode::create_node('public://import.csv', 'info_link');
}


/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function contentimport_node_presave(Drupal\Core\Entity\EntityInterface $entity) {

  // Exit early if possible.
  if ($entity->getEntityTypeId() != 'node') {
    return;
  }

  $content_type = $entity->bundle();
  if ($content_type == 'complaint_link' || $content_type == 'info_link') {
    $provinces = $entity->get('field_province');
    $ptids = [];
    foreach ($provinces as $ptid) {
      $ptids[] = $ptid->target_id;
    }
    
    $ptids = array_unique($ptids);
    //$entity->set('field_province', $ptids);
    $entity->{'field_province'} = $ptids;
    
    $sectors = $entity->get('field_sector');
    $stids = [];
    foreach ($sectors as $stid) {
      $stids[] = $stid->target_id;
    }
    $stids = array_unique($stids);
    $entity->{'field_sector'} = $stids;
  }

  if ($content_type == 'complaint_link') {
    
  }

  if ($content_type == 'info_link') {
  }

}
