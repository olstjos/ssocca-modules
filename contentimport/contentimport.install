<?php

/**
 * @file
 * Install, update and uninstall functions for the ISED CCH Content Import module.
 */

/**
 * Implements hook_install().
 */
function contentimport_install() {
//  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_uninstall().
 */
function contentimport_uninstall() {
//  \Drupal::messenger()->addStatus(__FUNCTION__);
}


/**
 * Ensure that all complaint_link and info_link content types have a translation.
 * Ensure that if province is empty that it selects all values.
 */
function contentimport_update_8001() {

  $query = \Drupal::entityQuery('node');
  $nids_complaint = $query->condition('type', 'complaint_link')
    ->notExists('field_province')
    ->execute();

  $nids_info = $query->condition('type', 'info_link')
    ->notExists('field_province')
    ->execute();

  $nids = array_merge($nids_info, $nids_complaint);

  foreach ($nids as $nid) {
    $node = \Drupal\node\Entity\Node::load($nid);
    $node->set('field_province', [4,5,6,7,8,9,10,11,12,13,14,15,16]);
    if (!$node->hasTranslation('fr')) {
      $nodeArray = $node->toArray();
      unset($nodeArray['field_province']);
      unset($nodeArray['field_sector']);
      $node->addTranslation('fr', $nodeArray);
      \Drupal::messenger()->addMessage('Successfully added translation for nid: "' . $node->id(), 'notice', TRUE);
      \Drupal::logger('OCA-automation')->notice('Successfully added translation for nid=%nid',
        [
         '%nid' => $node->id()
        ]
      );
    }
    \Drupal::messenger()->addMessage('Successfully added provinces for nid: "' . $node->id(), 'notice', TRUE);
    \Drupal::logger('OCA-automation')->notice('Successfully added provinces for nid=%nid',
      [
        '%nid' => $node->id()
        ]
    );
    $node->save();
  }

}


/**
 * Set all body formats to rich_text.
 */
function contentimport_update_8002() {

  $query = \Drupal::entityQuery('node');
  $nids_complaint = $query->condition('type', 'complaint_link')
    ->execute();

  $nids_info = $query->condition('type', 'info_link')
    ->execute();

  $nids = array_merge($nids_info, $nids_complaint);

  foreach ($nids as $nid) {
    $node = \Drupal\node\Entity\Node::load($nid);
    $node->body->format = 'rich_text';
    if ($node->hasTranslation('fr')) {
      $nodeFr = $node->getTranslation('fr');
      $nodeFr->body->format = 'rich_text';
      \Drupal::messenger()->addMessage('Successfully set body text format as rich_text format for nid: "' . $node->id(), 'notice', TRUE);
      \Drupal::logger('OCA-automation')->notice('Successfully set body text format as rich_text format for nid=%nid',
        [
          '%nid' => $node->id()
        ]
      );
      }
    else {
      $nodeArray = $node->toArray();
      unset($nodeArray['field_province']);
      unset($nodeArray['field_sector']);
      $node->addTranslation('fr', $nodeArray);
      \Drupal::messenger()->addMessage('Successfully added french translation AND set body text format as rich_text format for nid: "' . $node->id(), 'notice', TRUE);
      \Drupal::logger('OCA-automation')->notice('Successfully added french translation AND set body text format as rich_text format for nid=%nid',
        [
          '%nid' => $node->id()
        ]
      );
      
    }
    $node->save();
  }

}

/**
 * Undo previous update.
 * Ensure that if all provinces selected that none are selected.
 */
function contentimport_update_8003() {

  $query = \Drupal::entityQuery('node');
  $query->condition('type', 'complaint_link')
    ->condition('field_province', 4);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 5);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 6);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 7);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 8);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 9);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 10);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 11);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 12);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 13);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 14);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 15);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 16);
    $query->condition($and);
  $nids_complaint = $query->execute();
  $count = count($nids_complaint);
    \Drupal::messenger()->addMessage('found this many nids: "' . $count, 'notice', TRUE);
    \Drupal::logger('OCA-automation')->notice('found this many nids:%nids',
      [
        '%nids' => $count
        ]
    );

  $query = \Drupal::entityQuery('node');
  $query = $query->condition('type', 'info_link')
    ->condition('field_province', 4);
    //->execute();
    $and = $query->andConditionGroup();
    $and->condition('field_province', 5);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 6);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 7);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 8);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 9);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 10);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 11);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 12);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 13);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 14);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 15);
    $query->condition($and);
    $and = $query->andConditionGroup();
    $and->condition('field_province', 16);
    $query->condition($and);
  $nids_info = $query->execute();

  $count = count($nids_info);
    \Drupal::messenger()->addMessage('found this many nids: "' . $count, 'notice', TRUE);
    \Drupal::logger('OCA-automation')->notice('found this many nids:%nids',
      [
        '%nids' => $count
        ]
    );

  $nids = array_merge($nids_info, $nids_complaint);
  $count = count($nids);

  foreach ($nids as $nid) {
    $node = \Drupal\node\Entity\Node::load($nid);
    $node->set('field_province', []);
    \Drupal::messenger()->addMessage('Successfully removed provinces for nid: "' . $node->id(), 'notice', TRUE);
    \Drupal::logger('OCA-automation')->notice('Successfully removed provinces for nid=%nid',
      [
        '%nid' => $node->id()
        ]
    );
    $node->save();
  }

}


